name: Release Production

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version'
        required: true
      issue_number:
        description: 'Issue number ID'
        required: true

jobs:
  deploy_to_prod:
    runs-on: ubuntu-latest
    steps:
      - name: Extract release number
        id: extract_number
        uses: actions/github-script@v6
        with:
          script: |
            const releaseVersion = '${{ inputs.release_version }}';
            const num = releaseVersion.split('/')[1];
            core.exportVariable('VER', num);

      - name: Deploy to prod
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          ID_REGISTRY: ${{ secrets.ID_CONTAINER_REGISTRY }}
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
        run: |
          # Create SSH command
          SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key $SSH_USERNAME@$SSH_HOST"

          # Generate SSH key
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Deploy commands
          $SSH_COMMAND << EOF
            sudo groupadd docker
            sudo usermod -aG docker ${USER}
            echo "$YC_TOKEN" | docker login --username oauth --password-stdin cr.yandex
            docker kill $(docker ps -q) || true
            docker rm &(docker ps -a -q) || true
            docker image prune -f || true

            docker pull cr.yandex/$ID_REGISTRY/app:${{ env.VER }}_latest
            docker run -d --restart unless-stopped -p 3000:3000 cr.yandex/$ID_REGISTRY/app:${{ env.VER }}_latest
          EOF
