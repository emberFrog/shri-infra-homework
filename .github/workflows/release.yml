name: Create Release

on: [workflow_dispatch]

jobs:
  lint-test:
    name: Run lint-test
    uses: ./.github/workflows/pr_checks.yml

  create-release-branch:
    runs-on: ubuntu-latest
    needs: [lint-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get current run number
        id: run-number
        run: echo "run_number=${{ github.run_number }}" >> $GITHUB_ENV
      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Create and push release branch
        run: |
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

  create-release-docker:
    runs-on: ubuntu-latest
    needs: [create-release-branch]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: releases/${{ github.run_number }}
      - name: Login YC with Yandex ID token
        run: docker login --username oauth --password ${{ secrets.YC_TOKEN }} cr.yandex
      - name: Create Docker images
        run: |
          docker build -t cr.yandex/${{ secrets.ID_CONTAINER_REGISTRY }}/app:${{ github.run_number }} .
          docker build -t cr.yandex/${{ secrets.ID_CONTAINER_REGISTRY }}/app:${{ github.run_number }}_latest .
      - name: Push Docker images
        run: |
          docker push cr.yandex/${{ secrets.ID_CONTAINER_REGISTRY }}/app:${{ github.run_number }}
          docker push cr.yandex/${{ secrets.ID_CONTAINER_REGISTRY }}/app:${{ github.run_number }}_latest

  create-tag:
    runs-on: ubuntu-latest
    needs: [create-release-docker]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: releases/${{ github.run_number }}
      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Fetch all tags
        run: git fetch --tags
      - name: Create and push tag
        run: |
          TAG=v${{ github.run_number }}
          git tag -a $TAG -m "Tagging version $TAG"
          git push origin $TAG

  create-issue:
    runs-on: ubuntu-latest
    needs: [create-tag]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Get previous tag
        id: get-previous-tag
        run: |
          previous_tag=$(git tag --sort=-creatordate | grep -v "v${{ github.run_number }}" | head -n 1)
          echo "previous_tag=$previous_tag" >> $GITHUB_ENV
      - name: Get commit list
        id: get-commits
        run: |
          commits=$(git log ${{ env.previous_tag }}..HEAD --pretty=format:'* %s' --abbrev-commit)
          echo "commits=$commits" >> $GITHUB_ENV

      - name: Create changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          tag: ${{ github.ref_name }}
          writeToFile: false

      - name: Create issue
        id: issue
        env:
          TAG_NAME: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        run: |
          TITLE="Release ${{ github.ref_name }}"
          BODY=$(cat << 'EOF'

          # Release ${{ github.ref_name }}

          Автор релиза: @${{ github.actor }}
          Дата релиза: ${{ github.event.head_commit.timestamp }}
          Версия релиза: ${{ github.ref_name }}

          ## CHANGELOG
          ${{ steps.changelog.outputs.changes }}

          EOF
          )

          ISSUE_ID=$(gh issue list --json number,title -q \
            ".[] | select(.title == \"$TITLE\") | .number")
          if [ ! -z "$ISSUE_ID" ]; then
            gh issue edit $ISSUE_ID --body "$BODY"
          else
            gh issue create --title "$TITLE" --body "$BODY" --assignee ${{ github.actor }} --label "release"
            ISSUE_ID=$(gh issue list --json number,title -q \
            ".[] | select(.title == \"$TITLE\") | .number")
          fi
          echo "issueId=$ISSUE_ID" >> "$GITHUB_OUTPUT"

    outputs:
      issueNumber: ${{ steps.issue.outputs.issueId }}
